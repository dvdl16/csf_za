
name: CI

on:
  push:
    branches:
      - version-15
  pull_request:

concurrency:
  group: develop-csf_za-${{ github.event.number }}
  cancel-in-progress: true

env:
  TEST_AGAINST_FRAPPE_VERSION: v15.47.1
  TEST_AGAINST_ERPNEXT_VERSION: v15.41.1

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    name: Backend Unit Tests & UI Tests

    services:
      mariadb:
        image: mariadb:10.6
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=2s --health-retries=3

    steps:
      - name: Clone
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: |
              3.10

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          check-latest: true

      - name: Add to Hosts
        run: |
          echo "127.0.0.1 test_site" | sudo tee -a /etc/hosts

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/*requirements.txt', '**/pyproject.toml', '**/setup.py', '**/setup.cfg') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Cache yarn
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Cache cypress binary
        uses: actions/cache@v3
        with:
          path: ~/.cache/Cypress
          key: ${{ runner.os }}-cypress

      - name: Install
        run: |
          bash ${GITHUB_WORKSPACE}/.github/helper/install.sh

      - name: Run Unit Tests
        working-directory: /home/runner/frappe-bench
        run: |
          bench --site test_site set-config allow_tests true
          bench --site test_site run-tests --app csf_za --coverage
        env:
          TYPE: server

      - name: Run UI Tests
        working-directory: /home/runner/frappe-bench
        run: |
          set -x
          echo "Setting Up Procfile..."

          sed -i 's/^watch:/# watch:/g' Procfile
          sed -i 's/^schedule:/# schedule:/g' Procfile
          if [ "$TYPE" == "server" ]; then
            sed -i 's/^socketio:/# socketio:/g' Procfile;
            sed -i 's/^redis_socketio:/# redis_socketio:/g' Procfile;
          fi

          echo "Starting Bench..."
          export FRAPPE_TUNE_GC=True
          bench start &> bench_start.log &
          bench --site test_site run-ui-tests csf_za --headless -- --record
        env:
          TYPE: server
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}

      - name: Upload coverage data
        uses: codecov/codecov-action@v3
        with:
          name: Backend
          token: ${{ secrets.CODECOV_TOKEN }}
          # fail_ci_if_error: true
          files: /home/runner/frappe-bench/sites/coverage.xml
          verbose: true

      - name: Upload UI coverage data
        uses: codecov/codecov-action@v3
        with:
          name: Cypress
          # fail_ci_if_error: true
          files: /home/runner/frappe-bench/apps/frappe/.cypress-coverage/clover.xml
          verbose: true

      - name: Show bench output
        if: ${{ failure() }}
        run: |
          cat ~/frappe-bench/bench_start.log
